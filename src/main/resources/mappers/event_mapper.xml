<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.store">

    <select id="selectStoreList" parameterType="com.dchans.api.admin.dto.store.StoreDto$StoreRequestDto" resultType="com.dchans.api.admin.dto.store.StoreDto$StoreResponseDto">
        select store_code, store_name, category_type, status, ceo_name, phone, email, concat(address, '' , address_detail) as address,
            group_concat(
                case c.category_code
                when '0' then '신점'
                when '1' then '철학관'
                when '2' then '타로'
                when '3' then '굿당'
                when '4' then '기도터'
                else '사찰'
                end
                order by c.category_code
                separator ', '
            ) as categoryName,
            case status
            when 0 then '활성'
            when 1 then '비활성'
            end as statusName,
            to_char(created_at,'YYYY-MM-DD') as createdAt
        from store s
        cross join (
            select '0' as category_code union all
            select '1' union all select '2' union all
            select '3' union all select '4' union all select '5'
        ) c
        where 1=1
        and find_in_set(c.category_code, s.category_type) > 0
        <if test="name != null and name != ''">
            and store_name like concat('%', #{name}, '%')
        </if>
        <if test="address != null and address != ''">
            and address like concat('%', #{address}, '%')
        </if>
        <if test="startDate != null and startDate != ''">
            and to_char(created_at,'YYYY-MM-DD') >= #{startDate}
        </if>
        <if test="endDate != null and endDate != ''">
            and to_char(created_at,'YYYY-MM-DD') <![CDATA[<=]]> #{endDate}
        </if>
        <if test="categoryType != null and categoryType.size() > 0">
            and (
            <foreach collection="categoryType" item="category" separator=" OR ">
                FIND_IN_SET(#{category}, s.category_type) > 0
            </foreach>
            )
        </if>
        group by s.seq, s.store_name, s.category_type, s.status, s.ceo_name, s.phone, s.address, s.created_at
        order by created_at desc
        limit #{pageSize} offset #{offset}
    </select>

    <select id="selectStoreCount" parameterType="com.dchans.api.admin.dto.store.StoreDto$StoreRequestDto" resultType="int">
        select count(*) from store
        where 1 = 1
        <if test="name != null and name != ''">
            and store_name like concat('%', #{name}, '%')
        </if>
        <if test="address != null and address != ''">
            and address like concat('%', #{address}, '%')
        </if>
        <if test="startDate != null and startDate != ''">
            and to_char(created_at,'YYYY-MM-DD') >= #{startDate}
        </if>
        <if test="endDate != null and endDate != ''">
            and to_char(created_at,'YYYY-MM-DD') <![CDATA[<=]]> #{endDate}
        </if>
        <if test="categoryType != null and categoryType.size() > 0">
            and (
            <foreach collection="categoryType" item="category" separator=" OR ">
                FIND_IN_SET(#{category}, category_type) > 0
            </foreach>
            )
        </if>
    </select>

    <select id="selectStoreDetail" parameterType="com.dchans.api.admin.dto.store.StoreDto$StoreRequestDto" resultType="com.dchans.api.admin.dto.store.StoreDto$StoreResponseDto">
        select
            s.seq,
            s.store_code,
            s.store_name,
            s.category_type,
            s.status,
            s.ceo_name,
            s.business_number,
            s.zip_code,
            s.phone,
            s.email,
            s.address,
            s.address_detail,
            s.description,
            s.memo,
            s.start_time,
            s.end_time
        from store s
        where s.store_code = #{storeCode}
    </select>

    <select id="selectStoreProductList" parameterType="com.dchans.api.admin.dto.store.StoreDto$StoreRequestDto" resultType="com.dchans.api.admin.dto.store.StoreDto$StoreProductDto">
        select
            s.product_name as name,
            s.product_price as price
        from store_product s
        where s.store_code = #{storeCode}
    </select>


    <insert id="upsertStore" parameterType="com.dchans.api.admin.dto.store.StoreDto$StoreCreateDto" >
        insert into store (
            store_code,
            store_name,
            category_type,
            ceo_name,
            phone,
            email,
            zip_code,
            address,
            address_detail,
            description,
            memo,
            start_time,
            end_time,
            status
        )values(
            #{storeCode},
            #{storeName},
            #{categoryType},
            #{ceoName},
            #{phone},
            #{email},
            #{zipCode},
            #{address},
            #{addressDetail},
            #{description},
            #{memo},
            #{startTime},
            #{endTime},
            #{status}
        )
        on duplicate key update
            store_name = #{storeName},
            category_type = #{categoryType},
            ceo_name = #{ceoName},
            phone = #{phone},
            email = #{email},
            zip_code = #{zipCode},
            address = #{address},
            address_detail = #{addressDetail},
            description = #{description},
            memo = #{memo},
            start_time = #{startTime},
            end_time = #{endTime},
            status = #{status}
    </insert>

    <delete id="deleteStoreProduct">
        delete from store_product
        where 1 = 1
        and store_code = #{storeCode}
    </delete>

    <insert id="insertStoreProduct" parameterType="com.dchans.api.admin.dto.store.StoreDto$StoreProductDto">
        insert into store_product (store_code, product_name, product_price)
        values
        <foreach collection="list" item="item" index="idx" separator=",">
            (
            #{item.storeCode},
            #{item.name},
            #{item.price}
            )
        </foreach>
    </insert>


    <delete id="deleteStore">
        delete from store
        where 1 = 1
        and store_code in
        <foreach collection="storeCodeList" item="storeCode" open="(" close=")" separator=",">
            #{storeCode}
        </foreach>
    </delete>
</mapper>