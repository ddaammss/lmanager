<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.event">

    <select id="selectEventList" parameterType="com.dchans.api.admin.dto.store.EventDto$EventRequestDto" resultType="com.dchans.api.admin.dto.store.EventDto$EventResponseDto">
        select event_name,  concat(start_date,'-',end_date) as eventDate,
            to_char(created_at,'YYYY-MM-DD') as createdAt
        from event
        order by created_at desc
        limit #{pageSize} offset #{offset}
    </select>

    <select id="selectEventCount" parameterType="com.dchans.api.admin.dto.store.EventDto$EventRequestDto" resultType="int">
        select count(*) from event
    </select>

    <select id="selectEventDetail" parameterType="com.dchans.api.admin.dto.store.EventDto$EventRequestDto" resultType="com.dchans.api.admin.dto.store.EventDto$EventResponseDto">
        select
            seq,
            event_name,
            start_time,
            end_time
        from event s
        where seq = #{seq}
    </select>

    <select id="selectEventImageList" parameterType="com.dchans.api.admin.dto.store.EventDto$EventRequestDto" resultType="com.dchans.api.admin.dto.store.EventDto$EventImageDto">
        select
            s.product_name as name,
            s.product_price as price
        from event_image
        where seq = #{seq}
    </select>


    <insert id="upsertEvent" parameterType="com.dchans.api.admin.dto.store.EventDto$EventCreateDto" >
        insert into store (
            store_code,
            store_name,
            category_type,
            ceo_name,
            phone,
            email,
            zip_code,
            address,
            address_detail,
            description,
            memo,
            start_time,
            end_time,
            status
        )values(
            #{storeCode},
            #{storeName},
            #{categoryType},
            #{ceoName},
            #{phone},
            #{email},
            #{zipCode},
            #{address},
            #{addressDetail},
            #{description},
            #{memo},
            #{startTime},
            #{endTime},
            #{status}
        )
        on duplicate key update
            store_name = #{storeName},
            category_type = #{categoryType},
            ceo_name = #{ceoName},
            phone = #{phone},
            email = #{email},
            zip_code = #{zipCode},
            address = #{address},
            address_detail = #{addressDetail},
            description = #{description},
            memo = #{memo},
            start_time = #{startTime},
            end_time = #{endTime},
            status = #{status}
    </insert>

    <delete id="deleteEventImage">
        delete from event_image
        where 1 = 1
        and seq = #{seq}
    </delete>

    <insert id="insertEventImage" parameterType="com.dchans.api.admin.dto.store.EventDto$EventImageDto">
        insert into event_image (store_code, product_name, product_price)
        values
        <foreach collection="list" item="item" index="idx" separator=",">
            (
            #{item.storeCode},
            #{item.name},
            #{item.price}
            )
        </foreach>
    </insert>


    <delete id="deleteEvent">
        delete from store
        where 1 = 1
        and store_code in
        <foreach collection="storeCodeList" item="storeCode" open="(" close=")" separator=",">
            #{storeCode}
        </foreach>
    </delete>
</mapper>